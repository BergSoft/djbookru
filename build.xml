<?xml version="1.0" encoding="utf-8" standalone="no"?>

<project name="djbookru" default="help">

  <!-- определяем переменную для доступа к окружению -->
  <property environment="env"/>

  <!-- читаем конфигурационные файлы в область видимости ant'а , помним
       о иммутабельности переменных, т.е. то что определено в первом
       файле, не может быть изменено в последующих -->
  <property file="project.user.properties"/>
  <property file="project.properties"/>

  <!-- подгружаем нужное -->
  <import file="${basedir}/antfarm/macros.xml"/>

  <!-- пишем журнал обработки в указанный файл -->
  <record name="log_${project_name}.txt" action="start"/>

  <target name="help">
    <echo message="List available commands:"/>
    <echo message="  configure;"/>
    <echo message="  find    - finds string in code tree;"/>
    <echo message="            ant -Dtpl=STRINGHERE find"/>
    <echo message="  install - deployment."/>
    <echo message="  clean   - removes emacs's backup files."/>
  </target>

  <target name="configure">
    <!-- создаём свойство, если файл не существует -->
    <condition property="not_user_configuration">
      <not>
        <available file="${basedir}/project.user.properties" type="file"/>
      </not>
    </condition>

    <!-- создаём файл с пользовательской конфигурацией, если его ещё нет -->
    <if> <!-- ant-contrib -->
      <isset property="not_user_configuration"/>
      <then>
        <copy file="${basedir}/antfarm/project_user.template"
              tofile="${basedir}/project.user.properties"
              overwrite="false" encoding="utf-8"/>
        <fail message="Please, edit your project.user.properties before any actions!"/>
      </then>
    </if>

    <make_prop_file filename="${basedir}/our.properties"/>

    <parse_template src="${basedir}/conf/httpd_vhosts.template"
                    dst="${basedir}/httpd-vhosts.conf"
                    params="${basedir}/our.properties"/>

    <parse_template src="${basedir}/conf/django_wsgi.template"
                    dst="${basedir}/src/django.wsgi"
                    params="${basedir}/our.properties"/>

    <parse_template src="${basedir}/conf/django_settings.template"
                    dst="${basedir}/src/settings.py"
                    params="${basedir}/our.properties"/>

    <parse_template src="${basedir}/conf/logrotate.template"
                    dst="${basedir}/django.logrotate"
                    params="${basedir}/our.properties"/>

    <!-- для mysql генерируем скрипты создания и удаления БД и
         пользователя -->
    <if>
      <equals arg1="${db_engine}" arg2="django.db.backends.mysql"/>
      <then>
        <parse_template src="${basedir}/conf/db_mysql_create.template"
                        dst="${basedir}/db_mysql_create.sql"
                        params="${basedir}/our.properties"/>
        <parse_template src="${basedir}/conf/db_mysql_drop.template"
                        dst="${basedir}/db_mysql_drop.sql"
                        params="${basedir}/our.properties"/>
      </then>
    </if>

  </target>

  <target name="install">
    <!-- создаём свойство, если файл не существует -->
    <condition property="not_configured">
      <not>
        <available file="${basedir}/our.properties" type="file"/>
      </not>
    </condition>

    <!-- проходим по компонентам, при необходимости проведя
         конфигурирование проекта -->
    <if> <!-- ant-contrib -->
      <isset property="not_configured"/>
      <then>
        <echo message="It needs to be configured first..."/>
        <antcall target="configure"/>
      </then>
    </if>

    <!-- создаём необходимые каталоги -->
    <mkdir dir="${django_apps}/${web_server_name}/logs"/>

    <!-- копируем файлы приложения -->
    <copy todir="${django_apps}/${web_server_name}" encoding="utf-8">
      <fileset dir="${basedir}">
        <include name="lib/**/*"/>
        <include name="src/**/*"/>
      </fileset>
    </copy>

  </target>

  <target name="clean">
    <!-- удаляем все временные файлы -->
    <delete verbose="true">
      <fileset dir="." defaultexcludes="no">
        <exclude name="env/**/*"/>
        <include name="**/*~"/> <!-- emacs -->
        <include name="**/*.pyc"/> <!-- python compiled -->
      </fileset>
    </delete>

    <!-- удаляем сгенерированные файлы -->
    <delete file="${basedir}/our.properties" quiet="yes"/>
    <delete file="${basedir}/django.logrotate" quiet="yes"/>
    <delete file="${basedir}/httpd-vhosts.conf" quiet="yes"/>
    <delete file="${basedir}/src/settings.py" quiet="yes"/>
    <delete file="${basedir}/src/django.wsgi" quiet="yes"/>

    <if>
      <equals arg1="${db_engine}" arg2="django.db.backends.mysql"/>
      <then>
        <delete file="${basedir}/db_mysql_create.sql" quiet="yes"/>
        <delete file="${basedir}/db_mysql_drop.sql" quiet="yes"/>
      </then>
    </if>
  </target>

  <target name="find">
    <echo>The string "${tpl}" was found at files:</echo>
    <fileset id="fs" dir=".">
      <contains text="${tpl}" casesensitive="no"/>
    </fileset>
    <foreach list="${toString:fs}" delimiter=";"
             target="findResult" param="filename"/>
  </target>
  <target name="findResult">
    <echo message="${filename}"/>
  </target>

  <!-- создаём общий файл с параметрами для использования в процессе
       фильтрации -->
  <macrodef name="make_prop_file">
    <attribute name="filename"/>

    <sequential>
      <propertyfile file="@{filename}">
        <entry key="project_name" value="${project_name}"/>
        <entry key="user_project_name" value="${project_name}${developer_suffix}"/>
        <!-- web морда -->
        <entry key="django_engine" value="${django_engine}"/>
        <entry key="django_apps" value="${django_apps}"/>
        <entry key="django_sync" value="${django_sync}"/>
        <entry key="web_admin_name" value="${web_admin_name}"/>
        <entry key="web_admin_email" value="${web_admin_email}"/>
        <entry key="web_server_name" value="${web_server_name}"/>


        <entry key="db_engine" value="${db_engine}"/>
        <entry key="db_host" value="${db_host}"/>
        <entry key="db_database" value="${db_database}"/>
        <entry key="db_schema_name" value="${db_schema_name}"/>
        <entry key="db_schema_pass" value="${db_schema_pass}"/>
      </propertyfile>

      <if>
        <equals arg1="${db_engine}" arg2="django.db.backends.oracle"/>
        <then>
          <propertyfile file="@{filename}">
            <!-- у Oracle база данных одна, а схем много -->
            <entry key="db_database" value="${db_database}"/>
            <entry key="db_schema_name" value="${db_schema_name}${developer_suffix}"/>
          </propertyfile>
        </then>
        <else>
          <propertyfile file="@{filename}">
            <!-- у MySQL баз и пользователей много -->
            <entry key="db_database" value="${db_database}${developer_suffix}"/>
            <entry key="db_schema_name" value="${db_schema_name}${developer_suffix}"/>
          </propertyfile>
        </else>
      </if>
    </sequential>
  </macrodef>

</project>
