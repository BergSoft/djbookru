<?xml version="1.0" encoding="utf-8" standalone="no"?>

<project name="djbookru" default="help">

  <property environment="sysenv"/>

  <property file="project.user.properties"/>
  <property file="project.properties"/>
  <property name="build_to" value="${ant_build_dir}/${project_name}"/>

  <import file="${basedir}/antfarm/macros.xml"/>
  <import file="${basedir}/property_processor.xml"/>

  <record name="${project_name}.antlog.txt" action="start"/>

  <condition property="windows">
    <os family="windows"/>
  </condition>
  <condition property="unix">
    <or>
      <os family="unix"/>
      <os family="linux"/>
    </or>
  </condition>

  <target name="help">
    <echo message="List available commands:"/>
    <echo message="  init      - initializes environment, downloads dependencies;"/>
    <echo message="  update    - update environment, downloads dependencies;"/>
    <echo message="  configure - prepares configuration files;"/>
    <echo message="  genkey    - generate processing's GPG keys;"/>
    <echo message="  deploy    - deployment the project;"/>
    <echo message="  clean     - removes trash and autogenerated files;"/>
    <echo message="  dropenv   - removes virtual environment."/>
    <!--
    <echo message="  build     - build installation package;"/>
    <echo message="  rsync     - deployment the project;"/>
    //-->
  </target>

  <target name="init">
    <condition property="no_virtual_environment">
      <not>
        <available file="${basedir}/env/bin/activate" type="file"/>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="no_virtual_environment"/>
      <then>
        <sequential>
          <echo message="Initialize virtual environment for this project."/>
          <exec executable="virtualenv" failonerror="true">
            <arg line="${basedir}/env"/>
          </exec>
          <echo message="Install PIP into the virtual environment."/>
          <if>
            <equals arg1="${antfarm_quiet}" arg2="True"/>
            <then>
              <exec executable="${basedir}/env/bin/easy_install" failonerror="true">
                <arg line="-q pip"/>
              </exec>
            </then>
            <else>
              <exec executable="${basedir}/env/bin/easy_install" failonerror="true">
                <arg line="pip"/>
              </exec>
            </else>
          </if>
          <echo message="Source the virtual environment."/>
          <property name="sysenv.PATH" value="${basedir}/env/lib/python${python_version}/site-packages:%{sysenv.PATH}"/>
          <property name="sysenv.PYTHON_EGG_CACHE" value="${basedir}/env/.python-eggs:%{sysenv.PYTHON_EGG_CACHE}"/>
          <echo message="Install dependencies into the virtual environment. Please wait..."/>
          <if>
            <equals arg1="${antfarm_quiet}" arg2="True"/>
            <then>
              <exec executable="${basedir}/env/bin/pip" failonerror="true">
                <arg line="install -q -E ${basedir}/env -r ./deps.txt"/>
              </exec>
            </then>
            <else>
              <exec executable="${basedir}/env/bin/pip" failonerror="true">
                <arg line="install -E ${basedir}/env -r ./deps.txt"/>
              </exec>
            </else>
          </if>
          <echo message="Source environment with: . ${basedir}/env/bin/activate"/>
          <echo message="Use deactivate to disable virtual environment."/>
        </sequential>
      </then>
    </if>
  </target>

  <target name="update">
    <condition property="no_pip">
      <not>
        <available file="${basedir}/env/bin/pip" type="file"/>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="no_pip"/>
      <then>
        <fail message="Please, initialize virtual environment first."/>
      </then>
      <else>
        <sequential>
          <echo message="Source the virtual environment."/>
          <property name="sysenv.PATH" value="${basedir}/env/lib/python${python_version}/site-packages:%{sysenv.PATH}"/>
          <property name="sysenv.PYTHON_EGG_CACHE" value="${basedir}/env/.python-eggs:%{sysenv.PYTHON_EGG_CACHE}"/>
          <echo message="Update dependencies in the virtual environment. Please wait..."/>
          <if>
            <equals arg1="${antfarm_quiet}" arg2="True"/>
            <then>
              <exec executable="${basedir}/env/bin/pip" failonerror="true">
                <arg line="install -q -E ${basedir}/env -r ./deps.txt"/>
              </exec>
            </then>
            <else>
              <exec executable="${basedir}/env/bin/pip" failonerror="true">
                <arg line="install -E ${basedir}/env -r ./deps.txt"/>
              </exec>
            </else>
          </if>
          <echo message="Source environment with: . ${basedir}/env/bin/activate"/>
          <echo message="Use deactivate to disable virtual environment."/>
        </sequential>
      </else>
    </if>
  </target>

  <target name="configure">
    <condition property="not_user_configuration">
      <not>
        <available file="${basedir}/project.user.properties" type="file"/>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="not_user_configuration"/>
      <then>
        <copy file="${basedir}/tpls/project_user.template"
              tofile="${basedir}/project.user.properties"
              overwrite="false" encoding="utf-8"/>
        <fail message="Please, edit your project.user.properties before any actions!"/>
      </then>
    </if>

    <make_prop_file filename="${basedir}/${cumulative_config}"/>
    <mkdir dir="${basedir}/conf/"/>

    <parse_template src="${basedir}/tpls/logrotate.template"
                    dst="${basedir}/conf/django.logrotate"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/httpd_vhosts.template"
                    dst="${basedir}/conf/httpd-vhosts.conf"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/django_wsgi.template"
                    dst="${basedir}/conf/django.wsgi"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/crontab.template"
                    dst="${basedir}/conf/crontab.txt"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/bash_profile.template"
                    dst="${basedir}/conf/bash_profile.txt"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/dump_sh.template"
                    dst="${basedir}/conf/dump.sh"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/forum_index_sh.template"
                    dst="${basedir}/conf/forum_index.sh"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/install_sh.template"
                    dst="${basedir}/conf/install.sh"
                    params="${basedir}/${cumulative_config}"/>
    <parse_template src="${basedir}/tpls/update_sh.template"
                    dst="${basedir}/conf/update.sh"
                    params="${basedir}/${cumulative_config}"/>
    <parse_template src="${basedir}/tpls/remove_sh.template"
                    dst="${basedir}/conf/remove.sh"
                    params="${basedir}/${cumulative_config}"/>

    <parse_template src="${basedir}/tpls/django_settings.template"
                    dst="${basedir}/src/settings.py"
                    params="${basedir}/${cumulative_config}"/>

    <if>
      <equals arg1="${db_engine}" arg2="django.db.backends.mysql"/>
      <then>
        <parse_template src="${basedir}/tpls/db_mysql_create.template"
                        dst="${basedir}/conf/db_mysql_create.sql"
                        params="${basedir}/${cumulative_config}"/>

        <parse_template src="${basedir}/tpls/db_mysql_drop.template"
                        dst="${basedir}/conf/db_mysql_drop.sql"
                        params="${basedir}/${cumulative_config}"/>
      </then>
    </if>
  </target>

  <target name="genkey">
    <condition property="no_gpg_db">
      <not>
        <available file="${gpg_homedir}/trustdb.gpg" type="file"/>
      </not>
    </condition>

    <if> <!-- ant-contrib -->
      <isset property="no_gpg_db"/>
      <then>
        <sequential>
          <echo message="Create GPG directory..."/>
          <mkdir dir="${gpg_homedir}"/>
          <chmod file="${gpg_homedir}" type="dir" perm="700"/>
          <echo message="Create GPG keys. This could take some time..."/>
          <exec executable="gpg" failonerror="true">
            <arg line="--homedir=${gpg_homedir} --batch --gen-key ./conf/gen_key.gpg"/>
          </exec>
          <echo message="Export public key."/>
          <exec executable="python" failonerror="true">
            <arg value="-c"/>
            <arg value="import gnupg; g = gnupg.GPG(gnupghome='${basedir}/${gpg_homedir}'); l = g.list_keys(); open('${basedir}/${gpg_keyfile}', 'w').write(g.export_keys(l[0]['keyid']))"/>
          </exec>
        </sequential>
      </then>
    </if>
  </target>

  <target name="build">
    <echo message="Install project into build directory '${build_to}'"/>
    <mkdir dir="${build_to}"/>
    <copy todir="${build_to}" encoding="utf-8">
      <fileset dir="${basedir}">
        <include name="conf/**/*"/>
        <include name="src/**/*"/>
        <exclude name="src/search_index"/>
        <exclude name="src/database.sqlite"/>
        <exclude name="src/**/*.dump"/>
        <exclude name="src/**/*.sh"/>
        <exclude name="src/**/*.bat"/>
        <exclude name="src/**/*.po"/>
        <exclude name="src/**/*.pyc"/>
        <include name="lib/**/*"/>
        <include name="DEPLOY*"/>
        <include name="deps.txt"/>
      </fileset>
    </copy>

    <echo message="Compilation"/>
    <apply dir="${build_to}" failonerror="true" executable="py_compilefiles" osfamily="unix">
      <srcfile/>
      <fileset dir="${build_to}">
        <include name="src/**/*.py"/>
        <exclude name="src/**/migrations/*.py"/>
        <exclude name="src/**/commands/*.py"/>
      </fileset>
    </apply>

    <echo message="Copy settings"/>
    <copy file="${basedir}/src/settings.py"
          tofile="${ant_build_dir}/${project_name}.settings"
          overwrite="true" encoding="utf-8"/>

    <echo message="Remove sources from distribution"/>
    <delete verbose="true">
      <fileset dir="${build_to}/" defaultexcludes="no">
        <include name="src/**/*.py"/>
        <exclude name="src/**/migrations/*.py"/>
        <exclude name="src/**/commands/*.py"/>
      </fileset>
    </delete>
  </target>

  <target name="rsync">
    <echo message="Rsync project to ${hosting_ssh}"/>
    <exec executable="rsync" failonerror="true">
      <arg value="--verbose"/>
      <arg value="--recursive"/>
      <arg value="--update"/>
      <arg value="--rsh=ssh"/>
      <arg value="${build_to}"/>
      <arg value="${hosting_ssh}:${hosting_code_dir}/../"/>
    </exec>
  </target>

  <target name="deploy">
    <echo message="Deployment"/>
    <if>
      <isset property="unix"/>
      <then>
          <symlink overwrite="yes"
                   link="${basedir}/project.user.properties"
                   resource="${basedir}/project.user.production"/>
      </then>
    </if>
    <antcall target="clean"/>
    <antcall target="configure"/>
    <antcall target="build"/>
    <antcall target="rsync"/>
    <echo message="Restart web service manually!"/>
    <if>
      <isset property="unix"/>
      <then>
          <symlink overwrite="yes"
                   link="${basedir}/project.user.properties"
                   resource="${basedir}/project.user.development"/>
      </then>
    </if>
    <antcall target="clean"/>
    <antcall target="configure"/>
  </target>

  <target name="clean">
    <delete verbose="true">
      <fileset dir="." defaultexcludes="no">
        <exclude name="env/**/*"/> <!-- environment -->
        <include name="**/*~"/> <!-- emacs -->
        <include name="**/*.pyc"/> <!-- python -->

      </fileset>
    </delete>
    <delete file="${basedir}/${cumulative_config}" quiet="yes"/>
    <delete file="${basedir}/src/settings.py" quiet="yes"/>
    <delete file="${basedir}/pip-log.txt" quiet="yes"/>
    <delete includeemptydirs="true" quiet="yes">
      <fileset dir="conf"/>
    </delete>
  </target>

  <target name="dropenv">
    <delete dir="${basedir}/env" includeemptydirs="true" quiet="yes"/>
    <delete file="${basedir}/distribute-0.6.10.tar.gz" quiet="yes"/>
  </target>

</project>
